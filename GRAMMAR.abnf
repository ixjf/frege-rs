; ABNF syntax is as defined in RFC5234: http://www.rfc-editor.org/rfc/rfc5234.txt

; redefinition of rules may or may not be illegal but pretend that it isn't
; just this once

UALPHA                              = %x41-5A ; A-Z


; Propositional Logic Grammar
; Rule 5
grouper-opening                     = "("

grouper-closing                     = ")"

grouper                             = grouper-opening formula grouper-closing

; Rule 6
; allows any positive integer written in unicode subscript but disallows leading zeros
subscript-number                    = (%x2081-2089 [subscript-number]) ; 1-9
                                    / (subscript-number %x2080 [subscript-number]) ; 0

simple-statement                    = UALPHA [subscript-number] ; defines the instantiation of a simple statement

; Rules 7 & 11
conjunction-connective              = "&"

logical-conjunction                 = grouper-opening statement conjunction-connective statement grouper-closing

; Rule 8
negation-connective                 = "~"

logical-negation                    = negation-connective statement

; Rules 9 & 11
disjunction-connective              = %x2228 ; ∨

logical-disjunction                 = grouper-opening statement disjunction-connective statement grouper-closing

; Rules 10 & 11
conditional-connective              = %x2283 ; ⊃

logical-conditional                 = grouper-opening statement conditional-connective statement grouper-closing

; Rule 12
complex-statement                   = logical-conjunction
                                    / logical-negation
                                    / logical-disjunction
                                    / logical-conditional

; Rule 14
statement                           = simple-statement / complex-statement

; Rule 13
formula                             = simple-statement / complex-statement / grouper

; Rule 3
; I'm aware there are repetitions here. However, the redundancy is there deliberately
; because an expression is ANYTHING that has a well-defined meaning
; e.g. statements have a well-defined meaning, in that they are simple or complex
; statements, and simple or complex statements also each have their own well-defined meaning
expression                          = grouper-opening
                                    / grouper-closing
                                    / grouper
                                    / simple-statement
                                    / conjunction-connective
                                    / logical-conjunction
                                    / negation-connective
                                    / logical-negation
                                    / disjunction-connective
                                    / logical-disjunction
                                    / conditional-connective
                                    / logical-conditional
                                    / complex-statement
                                    / statement
                                    / formula


; Property Predicate Logic Grammar
; Rule 1
singular-term                       = %x61-77 [subscript-number] ; where %x61-77 = a-w ; defines the instantiation of a singular term

; Rule 2
term                                = singular-term

; Rule 3
property-predicate                  = UALPHA [subscript-number] %x00B9 ; where %x00B9 = superscript numeral '1' ; defines the instantiation of a property predicate

; Rule 4
singular-statement                  = property-predicate singular-term

; Rule 5
simple-statement                    =/ singular-statement

; Rules 6 & 7
predicate                           = simple-predicate / compound-predicate

simple-predicate                    = property-predicate

compound-predicate                  = (grouper-opening predicate conjunction-connective predicate grouper-closing) ; conjunction
                                    / (negation-connective predicate) ; negation
                                    / (grouper-opening predicate disjunction-connective predicate grouper-closing) ; disjunction
                                    / (grouper-opening predicate conditional-connective predicate grouper-closing) ; conditional

; Rule 8
formula                             =/ (simple-predicate 1*term)
                                    / compound-predicate

; Rule 9
existential-quantifier              = %x2203 ; where %x2203 = ∃

existential-quantifier-statement    = existential-quantifier predicate

; Rule 10
universal-quantifier                = %x2200 ; where %x2200 = ∀

universal-quantifier-statement      = universal-quantifier predicate

; Rule 11
complex-statement                   =/ existential-quantifier-statement
                                    / universal-quantifier-statement

; Rule 3 of PL
; see definition of Rule 3 of PL above for comments on redundancy
expression                          =/ singular-term
                                    / term
                                    / property-predicate
                                    / singular-statement
                                    / predicate
                                    / simple-predicate
                                    / compound-predicate
                                    / existential-quantifier
                                    / existential-quantifier-statement
                                    / universal-quantifier
                                    / universal-quantifier-statement


; Relational Predicate Logic Grammar
; Rule 1
superscript-number                  = ((%x00B9 / %x00B2-00B3 / %x2074-2079) [superscript-number]) ; 1-9
                                    / (superscript-number %x2070 [superscript-number]) ; 0

relation                            = UALPHA [subscript-number] superscript-number *term ; defines the instantiation of a relation

singular-statement                  = relation 1*singular-term ;;; how does ABNF handle this? does it think of singular-statement as a relation?

simple-predicate                    = relation

; Rule 3
variable                            = %x78-7A [subscript-number] ; where %x78-7A = x-z

; Rule 4
term                                =/ variable

; Rule 5
; I could enforce here that a predicate must be made of unbound relations,
; but it would only introduce unnecessary complexity
; you may read https://github.com/ixjf/rpl-rs/wiki/Language/ for info on this
existential-quantifier-statement    = existential-quantifier variable predicate
universal-quantifier-statement      = universal-quantifier variable predicate

; Rule 3 of PL
; see definition of Rule 3 of PL above for comments on redundancy
expression                          =/ relation
                                    / variable


; Interpreter-specific Grammar
; Rule 1
expression                          =/ (*WSP / *CRLF) expression (*WSP / *CRLF)

; Rule 2
statement-set-opening               = "{"

statement-set-closing               = "}"

statement-separator                 = ","

statement-set                       = statement-set-opening statement *(statement-separator statement) statement-set-closing

; Rule 3
argument-conclusion-indicator       = ".:."

argument                            = (statement *(statement-separator statement)) argument-conclusion-indicator statement

; Rule 4
input                               = statement-set / argument

; Rule 3 of PL
; see definition of Rule 3 of PL above for comments on redundancy
expression                          =/ statement-set
                                    / argument
                                    / argument-conclusion-indicator
                                    / statement-set-opening
                                    / statement-set-closing
                                    / statement-separator
                                    / input